# dynamic.yml - testing/example configuration for stratifications pipeline
#
# The following is an example of how to configure the pipeline. Users wishing
# to generate their own stratifications may use this as a starting point for
# generating the corresponding configuration.
#
# On a macro level, there are two levels of configuration: 'stratifications'
# and 'builds'. 'Stratification' refers to a reference fasta file and its
# associated source files. A 'build' is a specific instance of a
# 'stratification' which filters for the desired chromosomes and stratification
# types.
#
# The full specification of this file and its structure can be found in the
# 'GiabStrats' class in workflow/scripts/python/common/config.py. To make things
# easier, the most important information is documented here.
#
# The top level defines each of the stratfications, in this case named 'GRCh38',
# 'GRCh37', etc.
haploid_stratifications:
  GRCh38:
    # The fasta for this stratification's reference.
    ref:
      src:
        # Location of the fasta (either url or filepath). Note that if this is
        # a local file, the pipeline will raise an error if the file does
        # not exist. If the file is not bgzipped, it will be bgzipped on the
        # fly when downloaded
        #
        # filepath: path/to/local/file
        # url: https://url/to/file
        hap:
          url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/references/GRCh38/GCA_000001405.15_GRCh38_no_alt_analysis_set.fasta.gz

          # MD5 checksum of the file. This is optional, and if not given the
          # checksum could be anything. Recommended to be used after one has
          # committed to using a particular set of inputs, and in particular if
          # one suspects that the sources of said inputs might not be good
          # stewards (eg, they change files without warning).
          #
          # NOTE: the md5 will be calculated against the plain text content of the
          # file rather than the gzipped version (gzip records lots of
          # location-specific data in the file header which will throw off the
          # checksum)
          md5: a6da8681616c05eb542f1d91606a7b2f

      # The pattern of each chromosome. This must match the fasta exactly or
      # weird things will happen. The final stratification beds will also have
      # this pattern. The 'special' block contains 1-1 mappings between
      # chromosome names and their index (1-24). Anything not matching these
      # will be delegated to the 'template', which must include one special
      # directive '%i' which will denote the standard name of the chromosome (1,
      # 2, 3, ...X, Y).
      #
      # Defaults: 'chr%i'
      # chr_pattern:
      #   template: 'chr%i'
      #   special: {}

    strat_inputs:
      # A BED file containing gaps (if any) in the fasta reference. Gaps usually
      # mean regions with 'N' or some other indeterminate base. These gaps will
      # be subtracted off the final stratification files. If this is null, gaps
      # are not considered.
      gap:
        src: 
          # Location of the fasta (either url or filepath). This operates in the
          # same manner as the same key for 'ref' except that these can be in
          # either gzip or bgzip.
          #
          # filepath: path/to/local/file
          # url: https://url/to/file
          hap:
            url: https://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/gap.txt.gz
  
            # Analogous for that in 'ref' except the checksum is calculated after
            # gzipping the file if it is not already compressed
            md5: 4880b2f4c3f08766003855818f0db02d
  
        # Params for the bed file
        params:
  
          # Analogous to chr pattern above
          # chr_pattern:
          #   template: chr%i
          #   special: {}
  
          # Number of lines to skip. If the bed file has some unconventional
          # header it may be necessary to skip the first N lines.
          #
          # Default: 0
          # skip_lines: 1
  
          # Field separator. Some 'bed' files do not use tabs. In these cases,
          # it is necessary to specify a field separator manually. May be a
          # pattern as understood by python.re (for example, to match one of
          # more spaces, which sometimes happens).
          #
          # Default: "\t"
          # sep: "\s+"
          
          # The columns of the bed coordinates in this source file (0-indexed).
          #
          # Default: {chr: 0, start: 1, end: 2}
          bed_cols: {chr: 1, start: 2, end: 3}
  
      # Source files corresponding to low complexity stratifications.
      low_complexity:
  
        # Source files for Repeat Masker. 
        rmsk:
          src:
            url: https://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/rmsk.txt.gz
            md5: e8afed8cbcfef00b6cc47059c6fb6fa2
  
          # the column index of the repeat masker class (eg LINE, SINE, etc)
          class_col: 11
  
          params:
            bed_cols: {chr: 5, start: 6, end: 7}
  
        # Source file for satellite bed file. Analogous to gaps (see above). If
        # null, satellites will be inferred from repeat masker (above)
        satellites: null
  
        # Source file for simple repeats file. Analogous to gaps (see above).
        simreps:
          src: 
            url: https://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/simpleRepeat.txt.gz
            md5: b0e801344ba654a5146a2ba3e9973462
          params:
            bed_cols: {chr: 1, start: 2, end: 3}
  
      # Source data and files for sex chromosomal regions.
      xy:
        features: 
          # Source files for features on the X or Y chromosome. Analogous to gaps
          # (see above) with the addition of the 'level_col' as an option.
          x_bed:
            src: 
              url: https://raw.githubusercontent.com/SexChrLab/SexChrCoordinates/4ad1faf2b822db6fb89498a750d0b5336703fde3/GRCh38/chrX_genomic_features_GRCh38.bed
              md5: 94acda1d4358d30753422799152f4310
            # Column index for the feature level (eg XTR, Ampliconic, etc)
            level_col: 3
          y_bed:
            src: 
              url: https://raw.githubusercontent.com/SexChrLab/SexChrCoordinates/4ad1faf2b822db6fb89498a750d0b5336703fde3/GRCh38/chrY_genomic_features_GRCh38.bed
              md5: 770682734c41f5f7c1655adf1f986cb6
            level_col: 3
          # Set to true if XTR regions are desired
          xtr: true
          # Set to true if Ampliconic regions are desired
          ampliconic: true
        # Data for X or Y pseudoautosomal (PAR) regions. Since these are so short
        # it's easier to simply specify them manually here with two intervals ;)
        x_par:
          start: [0, 2781479]
          end: [155701383, 156030895]
        y_par:
          start: [10001, 2781479]
          end: [56887902, 57217415]
  
      # Source files for segmental duplications. For now only superdups is used
      # and supported.
      segdups:
        # Source files for superdups. Analogous to gaps (see above)
        superdups:
          src:
            url: https://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/genomicSuperDups.txt.gz
            md5: 502e2b4dd6bf0cbd8dbdd9eb373aaa8e
          params:
            bed_cols: {chr: 1, start: 2, end: 3}
  
      # Source files for function regions stratifications.
      functional:
        # Source for the FTBL file. Analogous to gaps src (see above)
        ftbl_src:
          url: https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_000001405.39_GRCh38.p13/GCF_000001405.39_GRCh38.p13_feature_table.txt.gz
          md5: e8c6e0bd7a29aee17bc067d0782da065
        # Source for the GFF file. Analogous to gaps src (see above)
        gff_src:
          url: https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_000001405.39_GRCh38.p13/GCF_000001405.39_GRCh38.p13_genomic.gff.gz
          md5: 6b657881c2c8d2d099a1c1749299538e
  
      # Mappability parameters for this reference
      mappability:
        # A list of patterns to specifify which chromosomes in the reference
        # should be considered as "unplaced." One would normally want to include
        # these chromosomes when assessing hard-to-map regions, as unplaced
        # contigs by definition are hard-to-map. Note that these unplaced contigs
        # will not be included in the final bed files.
        unplaced_chr_patterns: ["^chrM$", "^chr.+_.+$"]

    # Builds for this stratification. In this example we have two builds (named
    # 'test_autosome' and 'test_xy') which have difference directives for what
    # to include.
    builds:
      test-autosome:
        # Which chromosomes to include. Must be a set of integers 1-24 (where
        # 23 and 24 are X and Y respectively). Empty list implies all
        # chromosomes.
        chr_filter: [21, 22]

        # Other bed files to include as stratifications. Useful for the case
        # where one wants to use old stratifications and/or use bed files that
        # were generated in some esoteric way that I don't feel like programming
        # into this pipeline ;) This is a nested dictionary where the first
        # level is a key corresponding to the "other_strats" key at the toplevel
        # configuration and the next layer is the name of the stratification.
        # Here, the file will be named "OtherDifficult/GRCh38_contigs_lt500kb.bed.gz".
        other_strats:
          OtherDifficult:
            contigs_lt500kb:
              src:
                url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.1/GRCh38/OtherDifficult/GRCh38_contigs_lt500kb.bed.gz
              remove_gaps: true

        # Benchmark files for this reference (if desired). Each key will be fed
        # into corresponding inputs for hap.py using the generated stratifications
        # to benchmark.
        #
        # Default:
        # bench: null
        bench:
          bench_vcf:
            src:
              url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG005_NA24631_son/NISTv4.2.1/GRCh38/HG005_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
          bench_bed:
            src:
              url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG005_NA24631_son/NISTv4.2.1/GRCh38/HG005_GRCh38_1_22_v4.2.1_benchmark.bed
          query_vcf:
            src:
              url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG005_NA24631_son/NISTv4.2.1/GRCh38/SupplementaryFiles/inputvcfsandbeds/HG005_GRCh38_1_22_PacBio_HiFi_DeepVariant.vcf.gz

        # Specify a previous stratification to which this shall be compared (if
        # any)
        comparison:

          # The other stratification to which this should be compared. Must
          # match a key in "comparisons" (see below) in toplevel config
          other: GRCh38_v31

          # List of string pairs to transform file names, with the first member
          # of each pair matching (regexp) the path of the generated strat and
          # the second in the pair being the replacement for that match. Note
          # that only strats with "matching" filenames will be compared, so use
          # this to "make" generated file strat names match those from the other.
          #
          # Default: []
          # replacements: []

          # Similar to "replacements" in purpose, but uses a fixed map of file
          # paths to denote which strats to compare.
          path_mapper:
            LowComplexity/GRCh38_AllHomopolymers_ge7bp_imperfectge11bp_slop5.bed.gz: LowComplexity/GRCh38_AllHomopolymers_gt6bp_imperfectgt10bp_slop5.bed.gz
            LowComplexity/GRCh38_AllTandemRepeats_ge10000bp_slop5.bed.gz: LowComplexity/GRCh38_AllTandemRepeats_gt10000bp_slop5.bed.gz
            LowComplexity/GRCh38_AllTandemRepeats_ge100bp_slop5.bed.gz: LowComplexity/GRCh38_AllTandemRepeats_gt100bp_slop5.bed.gz
            LowComplexity/GRCh38_AllTandemRepeats.bed.gz: LowComplexity/GRCh38_allTandemRepeats.bed.gz
            LowComplexity/GRCh38_notinAllHomopolymers_ge7bp_imperfectge11bp_slop5.bed.gz: LowComplexity/GRCh38_notinAllHomopolymers_gt6bp_imperfectgt10bp_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_diTR_10to49_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_diTR_11to50_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_diTR_50to199_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_diTR_51to200_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_diTR_ge200_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_diTR_gt200_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_homopolymer_ge12_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_homopolymer_gt11_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_homopolymer_ge21_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_homopolymer_gt20_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_imperfecthomopolge11_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_imperfecthomopolgt10_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_imperfecthomopolge21_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_imperfecthomopolgt20_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_quadTR_19to49_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_quadTR_20to50_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_quadTR_50to199_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_quadTR_51to200_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_quadTR_ge200_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_quadTR_gt200_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_triTR_14to49_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_triTR_15to50_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_triTR_50to199_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_triTR_51to200_slop5.bed.gz
            LowComplexity/GRCh38_SimpleRepeat_triTR_ge200_slop5.bed.gz: LowComplexity/GRCh38_SimpleRepeat_triTR_gt200_slop5.bed.gz
            LowComplexity/GRCh38_AllTandemRepeats_le50bp_slop5.bed.gz: LowComplexity/GRCh38_AllTandemRepeats_lt51bp_slop5.bed.gz
            LowComplexity/GRCh38_AllTandemRepeats_ge101bp_slop5.bed.gz: LowComplexity/GRCh38_AllTandemRepeats_gt100bp_slop5.bed.gz
            LowComplexity/GRCh38_AllTandemRepeats_ge10001bp_slop5.bed.gz: LowComplexity/GRCh38_AllTandemRepeats_gt10000bp_slop5.bed.gz
            Functional/GRCh38_notinrefseq_cds.bed.gz: FunctionalRegions/GRCh38_notinrefseq_cds.bed.gz
            Functional/GRCh38_refseq_cds.bed.gz: FunctionalRegions/GRCh38_refseq_cds.bed.gz

          # Patterns in other stratification to ignore in comparison
          #
          # Default: []
          ignore_other:
            # not sure what these files are...
            - "GenomeSpecific/\\._GRCh38_HG002_v4\\.2\\.1_Tier1plusTier2_v0\\.6\\.1\\.bed\\.gz"
            - "OtherDifficult/\\._GRCh38_KIR\\.bed\\.gz"

          # Patterns in generated strat to ignore in comparison
          #
          # Default: []
          # ignore_generated: []

        # Directive for which stratification types to include
        include:
          # Include all low complexity regions if true
          # Default: true
          # low_complexity: true
          # Include all XY if true
          # Default: true
          xy: false
          # Include functional regions if true
          # Default: true
          # functional: true
          # Include telomeres if true (for references without telomeres this
          # will be deflatingly boring)
          # Default: true
          telomeres: false
          # Include segmental duplications if true
          # Default: true
          # segdups: true
          # Include union if true. Note, since union actually unifies the GC,
          # XY, LowComplexity, and mappabilty regions, this flag may do nothing
          # if some of these are also false.
          # Default: true
          union: false
          # List hard-to-map alignment parameters to compute. Use an empty list
          # if this is not desired. NOTE: this is computationally very heavy,
          # especially when using long lengths with non-zero mismatches/indels.
          #
          # Each member the the list must be a mapping with "length" (l),
          # "mismatches" (m), and "indels" (i) set (all non-negative integers).
          # This corresponds to finding regions of length l that have at least
          # one other alignment in the genome with SNPs m and INDELs i.
          mappability: []
          # Include GC content regions if provided. High and low are lists of
          # high/low bounds of GC content on which to bracket. The first of
          # each least is the fraction of GC content; the second is denotes
          # which fractions should be combined into a meta range. For example,
          # below there will be two meta ranges of 25-65 and 30-55. There must
          # be a matching number of 'True' entries in the high/low lists and
          # they will be combined in inverse order.
          # Defaults to:
          # gc:
          #   low:
          #     - [15, False]
          #     - [20, False]
          #     - [25, True]
          #     - [30, True]
          #   high:
          #     - [55, True]
          #     - [60, False]
          #     - [65, True]
          #     - [70, False]
          #     - [75, False]
          #     - [80, False]
          #     - [85, False]
      test-xy:
        chr_filter: [23, 24]
        include:
          telomeres: false
          mappability: []
      test-map:
        chr_filter: [21]
        include:
          low_complexity: false
          xy: false
          gc: null
          functional: false
          telomeres: false
          mappability:
            - {length: 50, mismatches: 0, indels: 0}

  GRCh37:
    ref:
      src:
        url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/references/GRCh37/hs37d5.fa.gz
        md5: 12a0bed94078e2d9e8c00da793bbc84e
      chr_pattern:
        template: '%i'
    strat_inputs:
      gap:
        src: 
          url: https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/gap.txt.gz
          md5: ec81040d83fd92b431d5abdf3bb0271a
        params:
          bed_cols: {chr: 1, start: 2, end: 3}
      low_complexity:
        rmsk:
          src:
            url: https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/rmsk.txt.gz
            md5: 540d385787030f6dcecd15e6f7229c32
          class_col: 11
          params:
            bed_cols: {chr: 5, start: 6, end: 7}
        satellites: null
        simreps:
          src: 
            url: https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/simpleRepeat.txt.gz
            md5: b8d13e59e6887c9f471ff1ceef92fcb1
          params:
            bed_cols: {chr: 1, start: 2, end: 3}
      xy:
        features: 
          x_bed:
            src: 
              url: https://raw.githubusercontent.com/SexChrLab/SexChrCoordinates/4ad1faf2b822db6fb89498a750d0b5336703fde3/hg19/chrX_genomic_features_hg19.bed
              md5: 5af632ccd4a5b0398ca4c0964c93276b
            level_col: 3
            params:
              sep: "\\s+"
          y_bed:
            src: 
              url: https://raw.githubusercontent.com/SexChrLab/SexChrCoordinates/4ad1faf2b822db6fb89498a750d0b5336703fde3/hg19/chrY_genomic_features_hg19.bed
              md5: 195dbf25e9b46a4daf528ede71070f74
            level_col: 3
            params:
              sep: "\\s+"
          xtr: true
          ampliconic: true
        x_par:
          start: [60001, 2699520]
          end: [154931044, 155260560]
        y_par:
          start: [0, 2749806]
          end: [59133470, 59373566]
      segdups:
        superdups:
          src:
            url: https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/genomicSuperDups.txt.gz
            md5: f71d6df1a4c04a15997cf58c6334a4e6
          params:
            bed_cols: {chr: 1, start: 2, end: 3}
      functional:
        ftbl_src:
          url: https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_000001405.25_GRCh37.p13/GCF_000001405.25_GRCh37.p13_feature_table.txt.gz
          md5: 3c960463f838d4406e639596d89ae3ca
        gff_src:
          url: https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_000001405.25_GRCh37.p13/GCF_000001405.25_GRCh37.p13_genomic.gff.gz
          md5: 2832fbf82812309349a82ebc681d1fdb
      mappability:
        unplaced_chr_patterns: ["^chrMT$", "^GL.+$", "^hs37d5$"]
    builds:
      test-autosome:
        chr_filter: [21, 22]
        include:
          xy: false
          telomeres: false
          mappability: []
      test-xy:
        chr_filter: [23, 24]
        include:
          low_complexity: false
          telomeres: false
          union: false
          mappability: []

  CHM13:
    ref:
      src:
        url: https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/analysis_set/chm13v2.0.fa.gz
        md5: 42b830df45df08ab63068e9128156e56
    strat_inputs:
      low_complexity:
        rmsk:
          src:
            url: https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/annotation/chm13v2.0_RepeatMasker_4.1.2p1.bed
            md5: f304b3f2a98c1772c693e3b01c33e409
          class_col: 6
        simreps:
          src:
            # from here: https://app.globus.org/file-manager?origin_id=9db1f0a6-a05a-11ea-8f06-0a21f750d19b&origin_path=%2Fteam-segdups%2FAssembly_analysis%2FMasked%2F/T2T_CHM13v2_trf.bed
            filepath: test/data/CHM13/LowComplexity/trf21and22.bed.gz
            md5: 73c59d8c9f062fbc75d834b851e2d738
        # https://t2t-consortium.slack.com/files/ULT7E06GL/F039A96RY84/t2t_censat_chm13v2.0_trackv2.0.bed
        satellites:
          src:
            filepath: test/data/CHM13/LowComplexity/censat21and22.bed.gz
            md5: cf0ca1d84f41263b25ba1863bca99b5b
          params:
            skip_lines: 1
          # the column with the type of satellite in it (for filtering)
          sat_col: 3
    xy:
      # from a slack thread w/ Melissa Wilson
      features:
        x_bed:
          src:
            url: https://raw.githubusercontent.com/SexChrLab/SexChrCoordinates/4ad1faf2b822db6fb89498a750d0b5336703fde3/T2T/chrX_genomic_features_CHM13.bed
            md5: 7cd6a2d1970372fa997144f4c842e2cd
          level_col: 3
        y_bed:
          src: 
            url: https://raw.githubusercontent.com/SexChrLab/SexChrCoordinates/4ad1faf2b822db6fb89498a750d0b5336703fde3/T2T/chrY_genomic_features_HG002.bed
            md5: c2cb0d831db1f71dfb4632a6ce79b0d6
          level_col: 3
        xtr: true
        ampliconic: false # not present in these files
      x_par:
        start: [0, 2394410]
        end: [153925834, 154259566]
      y_par:
        start: [0, 2458320]
        end: [62122809, 62460029]
    segdups:
      superdups: null
    functional:
      ftbl_src:
        url: https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_009914755.1_T2T-CHM13v2.0/GCF_009914755.1_T2T-CHM13v2.0_feature_table.txt.gz
        md5: a7192b354d455e9164f6c41393e7967a
      gff_src:
        url: https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_009914755.1_T2T-CHM13v2.0/GCF_009914755.1_T2T-CHM13v2.0_genomic.gff.gz
        md5: 970d3ed5947b37eae52e6c347aae0f59
    mappability:
      unplaced_chr_patterns: ["^chrM$"]
    builds:
      test-autosome:
        chr_filter: [21, 22]
        include:
          xy: false
          segdups: false
          mappability: []

      test-xy:
        chr_filter: [23, 24]
        include:
          low_complexity: false
          segdups: false
          mappability: []

  HG002:
    ref:
      hap1:
        src:
          url: https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/hg002v1.0.mat_Y_EBV_MT.fasta
        chr_pattern:
          template: 'chr%i_MATERNAL'
      hap2:
        src:
          url: https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/hg002v1.0.mat_X_EBV_MT.fasta
        chr_pattern:
          template: 'chr%i_PATERNAL'
    strat_inputs:
      low_complexity:
        rmsk: null
        simreps: null
        satellites: null
      xy:
        features: null
        x_par: null
        y_par: null
      segdups:
        superdups: null
      functional: null
      mappability:
        unplaced_chr_patterns: ["^chr(MT|EBV)$"]
    builds:
      test-autosome:
        chr_filter: [21, 22]
        include:
          xy: false
          segdups: false
          functional: false
          mappability: []
          hets: false

comparison_strats:
  GRCh38_v31: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.1/v3.1-genome-stratifications-GRCh38.tar.gz

# Stratifications to include in each benchmark. This is a global options to
# keep benchmarks comparable across builds.
# benchmark_subsets:
#   - AllAutosomes
#   - AllTandemRepeats
#   - AllHomopolymers_ge7bp_imperfectge11bp_slop5
#   - SimpleRepeat_diTR_10to49_slop5
#   - SimpleRepeat_homopolymer_7to11_slop5
#   - SimpleRepeat_homopolymer_ge21_slop5
#   - SimpleRepeat_imperfecthomopolge11_slop5
#   - SimpleRepeat_imperfecthomopolge21_slop5
#   - alldifficultregions
#   - alllowmapandsegdupregions
#   - chrX_PAR
#   - chrX_XTR
#   - chrY_XTR
#   - notinalldifficultregions
#   - notinAllHomopolymers_ge7bp_imperfectge11bp_slop5
#   - notinAllTandemRepeatsandHomopolymers_slop5
#   - segdups

# Paths in which resources and results will be stored
# "Resource" = downloaded stuff, "Result" = stuff derived from downloaded stuff
# paths:
#   resources: "resources"
#   results: "results"

# Links to external tools used in the pipeline
# tools:
#   repseq: https://github.com/ndwarshuis/repseq/archive/refs/tags/v1.1.0.tar.gz
#   gemlib: https://sourceforge.net/projects/gemlibrary/files/gem-library/Binary%20pre-release%203/GEM-binaries-Linux-x86_64-core_i3-20130406-045632.tbz2/download
